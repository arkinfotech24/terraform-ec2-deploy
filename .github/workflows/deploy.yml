# ─────────────────────────────
# GitHub Actions: CI Pipeline
# ─────────────────────────────
name: CI Pipeline

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:
    inputs:
      branch:
        description: "Select the branch to run this workflow on"
        required: false
        default: "master"
        type: choice
        options:
          - main
          - dev
          - staging
          - feature

jobs:

  # ─────────────────────────────
  # Step 1: Build Job
  # ─────────────────────────────
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Build Step
        run: |
          echo "Starting build..."
          echo "Simulating build for ${{ github.event.inputs.branch || github.ref_name }}"

  # ─────────────────────────────
  # Step 2: Test Job
  # ─────────────────────────────
  test:
    name: Test
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

  # ─────────────────────────────
  # Step 3: Continuous Deployment Job
  # ─────────────────────────────
  deploy:
    name: Continuous Deployment
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install AWS SDK
        run: npm install @aws-sdk/client-ec2

      - name: Install AWS CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip curl
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update
          aws --version

      - name: Terraform Init and Apply
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1
          TF_VAR_vpc_id: "vpc-bd543ec7"
        run: |
          terraform init -upgrade
          terraform apply -auto-approve

  # ─────────────────────────────
  # Step 4: Post-Deployment Job
  # ─────────────────────────────
  post-deploy:
    name: Post Deployment
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Post-Deployment Step
        run: |
          echo "Running post-deployment tasks for ${{ github.event.inputs.branch || github.ref_name }}"
          # Example: notify Slack, tag repo, run health checks, etc.


# # This is a workflow for GitHub Actions

# # # ─────────────────────────────
# # # GitHub Actions: CI Pipeline
# # # ─────────────────────────────
# name: CI Pipeline

# on:
#   push:
#     branches: [ "master" ]
#   pull_request:
#     branches: [ "master" ]
#   workflow_dispatch:
#     inputs:
#       branch:
#         description: "Select the branch to run this workflow on"
#         required: false
#         default: "master"
#         type: choice
#         options:
#           - main
#           - dev
#           - staging
#           - feature

# jobs:

#   # ─────────────────────────────
#   # Step 1: Build Job
#   # ─────────────────────────────
#   build:
#     name: Build
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4
#         with:
#           fetch-depth: 1
#           #ref: ${{ github.event.inputs.branch || github.ref_name }}

#       - name: Build Step
#         run: |
#           echo "Starting build..."
#           echo "Simulating build for ${{ github.event.inputs.branch || github.ref_name }}"

#   # ─────────────────────────────
#   #  Step 2: Test Job
#   # ─────────────────────────────
#   test:
#     name: Test
#     runs-on: ubuntu-latest
#     needs: build
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4
#         with:
#           fetch-depth: 1
#           #ref: ${{ github.event.inputs.branch || github.ref_name }}

#       - name: Setup Terraform
#         uses: hashicorp/setup-terraform@v2
#         with:
#           terraform_version: 1.5.7

#       - name: Terraform Init
#         run: terraform init

#       - name: Terraform Validate
#         run: terraform validate

#   # ─────────────────────────────
#   #  Step 3: Continous Deployment Job
#   # ─────────────────────────────
#   deploy:
#     name: Continous Deployment
#     runs-on: ubuntu-latest
#     needs: test
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4
#         with:
#           fetch-depth: 1
#           #ref: ${{ github.event.inputs.branch || github.ref_name }}

#       - name: Deploy Step
#         run: |
#           echo "Deploying application from ${{ github.event.inputs.branch || github.ref_name }}"
#           # terraform apply -auto-approve or AWS CLI logic here

#       - name: Setup Terraform
#         uses: hashicorp/setup-terraform@v2
#         with:
#           terraform_version: 1.5.7

#       - name: Setup Node.js
#         uses: actions/setup-node@v3
#         with:
#           node-version: 18

#       - name: Install AWS SDK
#         run: npm install @aws-sdk/client-ec2

#       - name: Install AWS CLI
#         run: |
#           sudo apt-get update
#           sudo apt-get install -y unzip curl
#           curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
#           unzip awscliv2.zip
#           sudo ./aws/install --update
#           aws --version

      # - name: Configure AWS CLI Credentials
      #   run: |
      #     aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     aws configure set default.region us-east-1

      # - name: Verify AWS Credentials
      #   run: aws sts get-caller-identity

      - name: Terraform Init and Apply
        env:
          TF_VAR_vpc_id: "vpc-bd543ec7"
        run: |
          terraform init -upgrade
          terraform apply -auto-approve
  # ─────────────────────────────
  #  Step 4: Post-Deployment Job
  # ─────────────────────────────
  post-deploy:
    name: Post Deployment
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch || github.ref_name }}

      - name: Post-Deployment Step
        run: |
          echo "Running post-deployment tasks for ${{ github.event.inputs.branch || github.ref_name }}"
          # Example: notify Slack, tag repo, run health checks, etc.


# name: CI Pipeline

# on:
#   push:
#     branches: [ "master" ]
#   pull_request:
#     branches: [ "master" ]
#   workflow_dispatch:
#     inputs:
#       branch:
#         description: "Select the branch to run this workflow on"
#         required: false
#         default: "master"
#         type: choice
#         options:
#           - main
#           - dev
#           - staging
#           - feature
#           - testing

# jobs:
#   # ----------------------------------------
#   # Stage 1: Continuous Download / Checkout
#   # ----------------------------------------
#   build:
#     name: Build
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4
#         with:
#           ref: ${{ github.event.inputs.branch || github.ref_name }}

#       - name: Build Step
#         run: |
#           echo "Starting build..."
#           echo "Simulating build for ${{ github.event.inputs.branch || github.ref_name }}"

#   # ----------------------------------------
#   # Stage 2: Continuous Testing and Scanning
#   # ----------------------------------------
#   test:
#     name: Test and Scan
#     runs-on: ubuntu-latest
#     needs: build
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4
#         with:
#           ref: ${{ github.event.inputs.branch || github.ref_name }}

#       - name: Setup Terraform
#         uses: hashicorp/setup-terraform@v2
#         with:
#           terraform_version: 1.5.7

#       - name: Terraform Init
#         run: terraform init

#       - name: Terraform Validate
#         run: terraform validate

#       - name: Install tflint
#         run: |
#           curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash

#       - name: Run tflint
#         run: tflint --init && tflint || true

#       - name: Install Checkov
#         run: pip install checkov

#       - name: Run Checkov (Security Scanner)
#         run: checkov -d . || true

#   # ----------------------------------------
#   # Stage 3: Continuous Deployment (apply)
#   # ----------------------------------------
#   deploy:
#     name: Deploy
#     runs-on: ubuntu-latest
#     needs: test
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4
#         with:
#           ref: ${{ github.event.inputs.branch || github.ref_name }}    

#       - name: Setup Terraform
#         uses: hashicorp/setup-terraform@v2
#         with:
#           terraform_version: 1.5.7

#       - name: Configure AWS Credentials
#         uses: aws-actions/configure-aws-credentials@v3
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: us-east-1
#           role-to-assume: arn:aws:iam::891711635596:role/Account-IAM-Role
#           role-duration-seconds: 3600
#           role-session-name: GitHubActions-${{ github.run_id }}  # Added run_id for uniqueness
#           role-skip-session-tagging: true  # Often needed when chaining roles

#       - name: Terraform Init
#         run: terraform init

#       - name: Terraform Apply
#         run: terraform apply -auto-approve

#       - name: Capture Terraform Output
#         id: tf-output
#         run: |
#           terraform output -json > tf_outputs.json
#           echo "Terraform Outputs:"
#           cat tf_outputs.json

#       - name: Comment Terraform Output on PR
#         if: github.event_name == 'pull_request'
#         uses: marocchino/sticky-pull-request-comment@v2
#         with:
#           token: ${{ secrets.GITHUB_TOKEN }}
#           header: terraform-output
#           message: |
#             ## ✅ Terraform Apply Output

#             \`\`\`json
#             ${{ steps.tf-output.outputs.output }}
#             \`\`\`
# # ----------------------------------------
#   # Stage 4: Continuous Post-Deployment Testing
#   # ----------------------------------------
#   post_deploy_test:
#     name: Post-Deploy Verification
#     runs-on: ubuntu-latest
#     needs: deploy

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Setup Terraform
#         uses: hashicorp/setup-terraform@v2
#         with:
#           terraform_version: 1.5.7

#       - name: Configure AWS Credentials
#         uses: aws-actions/configure-aws-credentials@v2
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: us-east-1

#       - name: Terraform Init
#         run: terraform init

#       - name: Get Instance Public IP
#         id: ip
#         run: |
#           IP=$(terraform output -raw instance_public_ip)
#           echo "public_ip=$IP" >> "$GITHUB_OUTPUT"

#       - name: Verify SSH Port Open
#         run: |
#           echo "Checking SSH (port 22) on ${PUBLIC_IP}..."
#           nc -zv ${{ steps.ip.outputs.public_ip }} 22 || echo "⚠️ Port 22 is closed or unreachable."

#       - name: Test HTTP response (if web server deployed)
#         run: |
#           echo "Attempting HTTP GET on ${PUBLIC_IP}..."
#           curl -I --connect-timeout 5 http://${{ steps.ip.outputs.public_ip }} || echo "⚠️ HTTP service unavailable."
